{
  "address": "0x307B3ad474e6e389Bc06F16122bB7Fd3F73a5F8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_customTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principalToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adjustment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truePricePaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        }
      ],
      "name": "initializeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_addition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buffer",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CustomBond.PARAMETER",
          "name": "_parameter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_input",
          "type": "uint256"
        }
      ],
      "name": "setBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPayoutGiven",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipalBonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trueBondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb20a3e6ae305b621f73a5de1b07e98e0f7698fdded3b1ca1947b94208b83bfb",
  "receipt": {
    "to": null,
    "from": "0x476e2806329d93F3289cD28cbAb1741Ec98c6e2a",
    "contractAddress": "0x307B3ad474e6e389Bc06F16122bB7Fd3F73a5F8E",
    "transactionIndex": 45,
    "gasUsed": "2025384",
    "logsBloom": "0x
    "blockHash": "0x08932ce161fd80cda30f3b0b66364f64e1ea49b1568403023857e467ff169492",
    "transactionHash": "0xeb20a3e6ae305b621f73a5de1b07e98e0f7698fdded3b1ca1947b94208b83bfb",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 10149481,
        "transactionHash": "0xeb20a3e6ae305b621f73a5de1b07e98e0f7698fdded3b1ca1947b94208b83bfb",
        "address": "0x307B3ad474e6e389Bc06F16122bB7Fd3F73a5F8E",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000000d3bc4aabe3495cb446e5f6dad278412c2b74767"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x08932ce161fd80cda30f3b0b66364f64e1ea49b1568403023857e467ff169492"
      }
    ],
    "blockNumber": 10149481,
    "cumulativeGasUsed": "4642433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x322B4D07cB80CD624ea483dc17F9AA122Eb5c339",
    "0xc83e6391dccf286ca64e67bac361faba69a48a61",
    "0xfe69cb13a0435f60783a54c18c011d88a6e770d0",
    "0x0d3BC4aABE3495cB446e5f6dAd278412c2b74767"
  ],
  "solcInputHash": "941a6918042610e23d1f26d886a96945",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"initializeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CustomBond.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayoutGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trueBondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice()\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt()\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay()\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio()\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_controlVariable\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint\"}},\"maxPayout()\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"redeem(address)\":{\"returns\":{\"_0\":\"uint\"}},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"params\":{\"_addition\":\"bool\",\"_buffer\":\"uint\",\"_increment\":\"uint\",\"_target\":\"uint\"}},\"setBondTerms(uint8,uint256)\":{\"params\":{\"_input\":\"uint\",\"_parameter\":\"PARAMETER\"}},\"trueBondPrice()\":{\"returns\":{\"price_\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice()\":{\"notice\":\"calculate current bond premium\"},\"currentDebt()\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay()\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio()\":{\"notice\":\"calculate current ratio of debt to payout token supplyprotocols using Olympus Pro should be careful when quickly adding large %s to total supply\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"deposit bond\"},\"initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"initializes bond parameters\"},\"maxPayout()\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256)\":{\"notice\":\"calculate user's interest due for new bond\"},\"pendingPayoutFor(address)\":{\"notice\":\"calculate amount of payout token available for claim by depositor\"},\"percentVestedFor(address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address)\":{\"notice\":\"redeem bond for user\"},\"setAdjustment(bool,uint256,uint256,uint256)\":{\"notice\":\"set control variable adjustment\"},\"setBondTerms(uint8,uint256)\":{\"notice\":\"set parameters for new bonds\"},\"trueBondPrice()\":{\"notice\":\"calculate true bond price a user pays\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/custom/CustomBond.sol\":\"CustomBond\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/custom/CustomBond.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\nimport \\\"../interfaces/ICustomTreasury.sol\\\";\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\ncontract CustomBond is OlympusAccessControlled {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeMath for uint;\\n    \\n    /* ======== EVENTS ======== */\\n\\n    event BondCreated( uint deposit, uint payout, uint expires );\\n    event BondRedeemed( address recipient, uint payout, uint remaining );\\n    event BondPriceChanged( uint internalPrice, uint debtRatio );\\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\\n    \\n    \\n     /* ======== STATE VARIABLES ======== */\\n    \\n    IERC20Metadata immutable payoutToken; // token paid for principal\\n    IERC20Metadata immutable principalToken; // inflow token\\n    ICustomTreasury immutable customTreasury; // pays for and receives principal\\n\\n    uint public totalPrincipalBonded;\\n    uint public totalPayoutGiven;\\n    \\n    Terms public terms; // stores terms for new bonds\\n    Adjust public adjustment; // stores adjustment to BCV data\\n\\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\\n\\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\\n    uint public lastDecay; // reference block for debt decay\\n    bool public initialized; // initialized\\n    \\n    /* ======== STRUCTS ======== */\\n\\n    // Info for creating new bonds\\n    struct Terms {\\n        uint controlVariable; // scaling variable for price\\n        uint vestingTerm; // in blocks\\n        uint minimumPrice; // vs principal value\\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint maxDebt; // payout token decimal debt ratio, max % total supply created as debt\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint payout; // payout token remaining to be paid\\n        uint vesting; // Blocks left to vest\\n        uint lastBlock; // Last interaction\\n        uint truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\\n    }\\n\\n    // Info for incremental adjustments to control variable \\n    struct Adjust {\\n        bool add; // addition or subtraction\\n        uint rate; // increment\\n        uint target; // BCV when adjustment finished\\n        uint buffer; // minimum length (in blocks) between adjustments\\n        uint lastBlock; // block when last adjustment made\\n    }\\n    \\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _customTreasury, \\n        address _payoutToken, \\n        address _principalToken, \\n        address _initialOwner\\n    ) OlympusAccessControlled(IOlympusAuthority(_initialOwner)) {\\n        require( _customTreasury != address(0) );\\n        customTreasury = ICustomTreasury( _customTreasury );\\n        require( _payoutToken != address(0) );\\n        payoutToken = IERC20Metadata( _payoutToken );\\n        require( _principalToken != address(0) );\\n        principalToken = IERC20Metadata( _principalToken );\\n    }\\n\\n    /* ======== INITIALIZATION ======== */\\n    \\n    /**\\n     *  @notice initializes bond parameters\\n     *  @param _controlVariable uint\\n     *  @param _vestingTerm uint\\n     *  @param _minimumPrice uint\\n     *  @param _maxPayout uint\\n     *  @param _maxDebt uint\\n     *  @param _initialDebt uint\\n     */\\n    function initializeBond( \\n        uint _controlVariable, \\n        uint _vestingTerm,\\n        uint _minimumPrice,\\n        uint _maxPayout,\\n        uint _maxDebt,\\n        uint _initialDebt\\n    ) external onlyPolicy {\\n        require( initialized == false, \\\"initialized\\\" );\\n        require( _vestingTerm >= 10000, \\\"Vesting must be longer than 36 hours\\\" );\\n        require( _maxPayout <= 1000, \\\"Payout cannot be above 1 percent\\\" );\\n        initialized = true;\\n        terms = Terms ({\\n            controlVariable: _controlVariable,\\n            vestingTerm: _vestingTerm,\\n            minimumPrice: _minimumPrice,\\n            maxPayout: _maxPayout,\\n            maxDebt: _maxDebt\\n        });\\n        totalDebt = _initialDebt;\\n        lastDecay = block.number;\\n    }\\n    \\n    \\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    enum PARAMETER { VESTING, PAYOUT, DEBT }\\n    /**\\n     *  @notice set parameters for new bonds\\n     *  @param _parameter PARAMETER\\n     *  @param _input uint\\n     */\\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy {\\n        if ( _parameter == PARAMETER.VESTING ) { // 0\\n            require( _input >= 10000, \\\"Vesting must be longer than 36 hours\\\" );\\n            terms.vestingTerm = _input;\\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\\n            require( _input <= 1000, \\\"Payout cannot be above 1 percent\\\" );\\n            terms.maxPayout = _input;\\n        } else if ( _parameter == PARAMETER.DEBT ) { // 2\\n            terms.maxDebt = _input;\\n        }\\n    }\\n\\n    /**\\n     *  @notice set control variable adjustment\\n     *  @param _addition bool\\n     *  @param _increment uint\\n     *  @param _target uint\\n     *  @param _buffer uint\\n     */\\n    function setAdjustment ( \\n        bool _addition,\\n        uint _increment, \\n        uint _target,\\n        uint _buffer \\n    ) external onlyPolicy {\\n        require( _increment <= terms.controlVariable.mul( 30 ).div( 1000 ), \\\"Increment too large\\\" );\\n\\n        adjustment = Adjust({\\n            add: _addition,\\n            rate: _increment,\\n            target: _target,\\n            buffer: _buffer,\\n            lastBlock: block.number\\n        });\\n    }\\n    \\n    /* ======== USER FUNCTIONS ======== */\\n    \\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(uint _amount, uint _maxPrice, address _depositor) external returns (uint) {\\n        require( _depositor != address(0), \\\"Invalid address\\\" );\\n\\n        decayDebt();\\n        require( totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\" );\\n        \\n        uint nativePrice = trueBondPrice();\\n\\n        require( _maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\" ); // slippage protection\\n\\n        uint value = customTreasury.valueOfToken( address(principalToken), _amount );\\n        uint payout = _payoutFor( value ); // payout to bonder is computed\\n\\n        require( payout >= 10 ** payoutToken.decimals() / 100, \\\"Bond too small\\\" ); // must be > 0.01 payout token ( underflow protection )\\n        require( payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n        /**\\n            principal is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) payout token\\n         */\\n        principalToken.safeTransferFrom( msg.sender, address(this), _amount );\\n        principalToken.approve( address(customTreasury), _amount );\\n        customTreasury.deposit( address(principalToken), _amount, payout );\\n        \\n        // total debt is increased\\n        totalDebt = totalDebt.add( value );\\n                \\n        // depositor info is stored\\n        bondInfo[ _depositor ] = Bond({ \\n            payout: bondInfo[ _depositor ].payout.add( payout ),\\n            vesting: terms.vestingTerm,\\n            lastBlock: block.number,\\n            truePricePaid: trueBondPrice()\\n        });\\n\\n        // indexed events are emitted\\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ) );\\n        emit BondPriceChanged( _bondPrice(), debtRatio() );\\n\\n        totalPrincipalBonded = totalPrincipalBonded.add(_amount); // total bonded increased\\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\\n\\n        adjust(); // control variable is adjusted\\n        return payout; \\n    }\\n    \\n    /** \\n     *  @notice redeem bond for user\\n     *  @return uint\\n     */ \\n    function redeem(address _depositor) external returns (uint) {\\n        Bond memory info = bondInfo[ _depositor ];\\n        uint percentVested = percentVestedFor( _depositor ); // (blocks since last interaction / vesting term remaining)\\n\\n        if ( percentVested >= 10000 ) { // if fully vested\\n            delete bondInfo[ _depositor ]; // delete user info\\n            emit BondRedeemed( _depositor, info.payout, 0 ); // emit bond data\\n            payoutToken.transfer( _depositor, info.payout );\\n            return info.payout;\\n\\n        } else { // if unfinished\\n            // calculate payout vested\\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\\n\\n            // store updated deposit info\\n            bondInfo[ _depositor ] = Bond({\\n                payout: info.payout.sub( payout ),\\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\\n                lastBlock: block.number,\\n                truePricePaid: info.truePricePaid\\n            });\\n\\n            emit BondRedeemed( _depositor, payout, bondInfo[ _depositor ].payout );\\n            payoutToken.transfer( _depositor, payout );\\n            return payout;\\n        }\\n        \\n    }\\n    \\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice makes incremental adjustment to control variable\\n     */\\n    function adjust() internal {\\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\\n            uint initial = terms.controlVariable;\\n            if ( adjustment.add ) {\\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\\n                if ( terms.controlVariable >= adjustment.target ) {\\n                    adjustment.rate = 0;\\n                }\\n            } else {\\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\\n                if ( terms.controlVariable <= adjustment.target ) {\\n                    adjustment.rate = 0;\\n                }\\n            }\\n            adjustment.lastBlock = block.number;\\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt() internal {\\n        totalDebt = totalDebt.sub( debtDecay() );\\n        lastDecay = block.number;\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice() internal returns ( uint price_ ) {\\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\\n        if ( price_ < terms.minimumPrice ) {\\n            price_ = terms.minimumPrice;        \\n        } else if ( terms.minimumPrice != 0 ) {\\n            terms.minimumPrice = 0;\\n        }\\n    }\\n\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice() public view returns ( uint price_ ) {        \\n        price_ = terms.controlVariable.mul( debtRatio() ).div( 10 ** (uint256(payoutToken.decimals()).sub(5)) );\\n        if ( price_ < terms.minimumPrice ) {\\n            price_ = terms.minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate true bond price a user pays\\n     *  @return price_ uint\\n     */\\n    function trueBondPrice() public view returns ( uint price_ ) {\\n        price_ = bondPrice();\\n    }\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout() public view returns ( uint ) {\\n        return payoutToken.totalSupply().mul( terms.maxPayout ).div( 100000 );\\n    }\\n\\n    /**\\n     *  @notice calculate total interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function _payoutFor( uint _value ) internal view returns ( uint ) {\\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\\n    }\\n\\n    /**\\n     *  @notice calculate user's interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor( uint _value ) external view returns ( uint ) {\\n        uint total = FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e11 );\\n        return total;\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to payout token supply\\n     *  @notice protocols using Olympus Pro should be careful when quickly adding large %s to total supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \\n        debtRatio_ = FixedPoint.fraction( \\n            currentDebt().mul( 10 ** payoutToken.decimals() ), \\n            payoutToken.totalSupply()\\n        ).decode112with18().div( 1e18 );\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt() public view returns ( uint ) {\\n        return totalDebt.sub( debtDecay() );\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay() public view returns ( uint decay_ ) {\\n        uint blocksSinceLast = block.number.sub( lastDecay );\\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\\n        if ( decay_ > totalDebt ) {\\n            decay_ = totalDebt;\\n        }\\n    }\\n\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\\n        Bond memory bond = bondInfo[ _depositor ];\\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\\n        uint vesting = bond.vesting;\\n\\n        if ( vesting > 0 ) {\\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of payout token available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\\n        uint percentVested = percentVestedFor( _depositor );\\n        uint payout = bondInfo[ _depositor ].payout;\\n\\n        if ( percentVested >= 10000 ) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0xd743fbf56cace234d31ee980120b0356e030b2c7d295f1b95115211cd28a0892\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/ICustomTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface ICustomTreasury {\\n    function deposit(address _principleTokenAddress, uint _amountPrincipleToken, uint _amountPayoutToken) external;\\n    function valueOfToken( address _principleTokenAddress, uint _amount ) external view returns ( uint value_ );\\n}\",\"keccak256\":\"0x2682649102a31a5735619deee7463f45c9a3cba8741e2ef68f21fbac1aeb55f6\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n// TODO(zx): replace with OZ implementation.\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    //     require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    //     return _functionCallWithValue(target, data, value, errorMessage);\\n    // }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2d8595504a985f53a5db9e6220ae614a7f8b4c5c1d35f55b07e08a21e40b2b9\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\nlibrary FixedPoint {\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint256) {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xd0cfb115e614660af05269fa70be389fbe6c7f69e33fd34da466c0471ce95387\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x4fce1c6e69dcd9e555dcacea6d1fa8966f0fbb3488730c30d51ef7e81490c2dc\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2edfc9cacbecb4aa48c6e5752a2d87939b450b64c18e77ad1098430d0772005\",\"license\":\"AGPL-3.0\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b61010090815262000031916000919062000142565b503480156200003f57600080fd5b506040516200252938038062002529833981810160405260808110156200006557600080fd5b5080516020820151604080840151606090940151600180546001600160a01b0319166001600160a01b038316908117909155915193949293909182917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038416620000dc57600080fd5b6001600160601b0319606085901b1660c0526001600160a01b0383166200010257600080fd5b6001600160601b0319606084901b166080526001600160a01b0382166200012857600080fd5b5060601b6001600160601b03191660a05250620001ee9050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200017a5760008555620001c5565b82601f106200019557805160ff1916838001178555620001c5565b82800160010185558215620001c5579182015b82811115620001c5578251825591602001919060010190620001a8565b50620001d3929150620001d7565b5090565b5b80821115620001d35760008155600101620001d8565b60805160601c60a05160601c60c05160601c6122c96200026060003980610bf05280610e695280610f4b525080610c1f5280610e105280610e3a5280610f13525080610cc252806111f2528061139752806116c3528061175c528061180252806118cd5280611e2e52506122c96000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80638dbdbe6d116100e3578063d50256251161008c578063e392a26211610066578063e392a26214610456578063f5c2ab5b1461045e578063fc7b9c181461046657610198565b8063d502562514610413578063d7ccfb0b14610446578063e0176de81461044e57610198565b8063bf7e214f116100bd578063bf7e214f1461039b578063cd1234b3146103bf578063cea55f571461040b57610198565b80638dbdbe6d1461030857806395a2251f1461033a578063a50603b21461036057610198565b8063451ee4a1116101455780637927ebf81161011f5780637927ebf8146102bd5780637a9e5e4b146102da5780637cbe044c1461030057610198565b8063451ee4a11461025a578063507930ec1461028f578063759076e5146102b557610198565b80631a3d0068116101765780631a3d0068146101f95780631e321a0f1461022c5780632bab6bde1461025257610198565b806301b88ee81461019d5780630a748489146101d5578063158ef93e146101dd575b600080fd5b6101c3600480360360208110156101b357600080fd5b50356001600160a01b031661046e565b60408051918252519081900360200190f35b6101c36104c7565b6101e56104d6565b604080519115158252519081900360200190f35b61022a6004803603608081101561020f57600080fd5b508035151590602081013590604081013590606001356104df565b005b61022a6004803603604081101561024257600080fd5b5060ff81351690602001356106ba565b6101c3610898565b61026261089e565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101c3600480360360208110156102a557600080fd5b50356001600160a01b03166108b6565b6101c3610948565b6101c3600480360360208110156102d357600080fd5b5035610961565b61022a600480360360208110156102f057600080fd5b50356001600160a01b031661098f565b6101c3610add565b6101c36004803603606081101561031e57600080fd5b50803590602081013590604001356001600160a01b0316610ae3565b6101c36004803603602081101561035057600080fd5b50356001600160a01b0316611116565b61022a600480360360c081101561037657600080fd5b5080359060208101359060408101359060608101359060808101359060a00135611443565b6103a3611674565b604080516001600160a01b039092168252519081900360200190f35b6103e5600480360360208110156103d557600080fd5b50356001600160a01b0316611683565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101c36116aa565b61041b6117e4565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101c36117f6565b6101c36118b9565b6101c3611956565b6101c361199b565b6101c36119a1565b60008061047a836108b6565b6001600160a01b0384166000908152600e602052604090205490915061271082106104a7578092506104c0565b6104bd6127106104b783856119a7565b90611a09565b92505b5050919050565b60006104d16117f6565b905090565b60115460ff1681565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d602081101561055757600080fd5b50516000906001600160a01b031633146106045760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b50509250505060405180910390fd5b5060045461061b906103e8906104b790601e6119a7565b83111561066f576040805162461bcd60e51b815260206004820152601360248201527f496e6372656d656e7420746f6f206c6172676500000000000000000000000000604482015290519081900360640190fd5b6040805160a08101825294151580865260208601859052908501839052606085018290524360809095018590526009805460ff19169091179055600a92909255600b55600c55600d55565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b50516000906001600160a01b031633146107a55760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b5060008260028111156107b457fe5b1415610805576127108110156107fb5760405162461bcd60e51b81526004018080602001828103825260248152602001806122996024913960400191505060405180910390fd5b6005819055610894565b600182600281111561081357fe5b141561087a576103e8811115610870576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6007819055610894565b600282600281111561088857fe5b14156108945760088190555b5050565b60035481565b600954600a54600b54600c54600d5460ff9094169385565b60006108c06121f4565b506001600160a01b0382166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909190610916904390611a4b565b6020830151909150801561093b57610934816104b7846127106119a7565b9350610940565b600093505b505050919050565b60006104d1610955611956565b600f5490611a4b565b90565b60008061098664174876e8006104b76109818661097c6117f6565b611a8d565b611c0f565b9150505b919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d6020811015610a0757600080fd5b50516000906001600160a01b03163314610a7a5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b50600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60025481565b60006001600160a01b038216610b40576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b610b48611c27565b600854600f541115610ba1576040805162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015290519081900360640190fd5b6000610bab6104c7565b905080841015610bec5760405162461bcd60e51b81526004018080602001828103825260238152602001806122766023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1b317e57f0000000000000000000000000000000000000000000000000000000000000000886040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b505190506000610cbc82611c3b565b905060647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d6020811015610d4357600080fd5b505160ff16600a0a81610d5257fe5b04811015610da7576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015290519081900360640190fd5b610daf6118b9565b811115610e03576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015290519081900360640190fd5b610e386001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a611c55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b505060408051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018a90526044820184905291517f000000000000000000000000000000000000000000000000000000000000000090921691630efe6a8b9160648082019260009290919082900301818387803b158015610f9557600080fd5b505af1158015610fa9573d6000803e3d6000fd5b5050600f54610fbb9250905083611dc8565b600f55604080516080810182526001600160a01b0387166000908152600e60205291909120548190610fed9084611dc8565b815260055460208201524360408201526060016110086104c7565b90526001600160a01b0386166000908152600e6020908152604091829020835181559083015160018201559082015160028201556060909101516003909101556005547fb7ce5a2d90f1705ca02547b0eb827724683e0df3b809477ae4326d0eefed0bc0908890839061107c904390611dc8565b60408051938452602084019290925282820152519081900360600190a17f2cb17bd1fd2a1fecfefae2de1e6a59194abaa62179652924ccdca01617f0bf166110c2611e22565b6110ca6116aa565b6040805192835260208301919091528051918290030190a16002546110ef9088611dc8565b6002556003546110ff9082611dc8565b60035561110a611eab565b925050505b9392505050565b60006111206121f4565b506001600160a01b0382166000908152600e6020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015290611173846108b6565b905061271081106112a2576001600160a01b0384166000818152600e602090815260408083208381556001810184905560028101849055600301839055855181519485529184019190915282810191909152517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b19181900360600190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8584600001516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d602081101561129557600080fd5b50509051915061098a9050565b81516000906112b990612710906104b790856119a7565b905060405180608001604052806112dd838660000151611a4b90919063ffffffff16565b81526020016113076112fc866040015143611a4b90919063ffffffff16565b602087015190611a4b565b8152436020808301919091526060808701516040938401526001600160a01b0389166000818152600e845284902085518082558685015160018301558686015160028301559583015160039091015583519081529182018590528183019390935290517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b505050506040513d602081101561143657600080fd5b5090935061098a92505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561149157600080fd5b505afa1580156114a5573d6000803e3d6000fd5b505050506040513d60208110156114bb57600080fd5b50516000906001600160a01b0316331461152e5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b5060115460ff1615611587576040805162461bcd60e51b815260206004820152600b60248201527f696e697469616c697a6564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6127108510156115c85760405162461bcd60e51b81526004018080602001828103825260248152602001806122996024913960400191505060405180910390fd5b6103e883111561161f576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6011805460ff191660011790556040805160a0810182528781526020810187905290810185905260608101849052608001829052600495909555600593909355600691909155600755600855600f5543601055565b6001546001600160a01b031681565b600e6020526000908152604090208054600182015460028301546003909301549192909184565b60006104d1670de0b6b3a76400006104b761098161175a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561171a57600080fd5b505afa15801561172e573d6000803e3d6000fd5b505050506040513d602081101561174457600080fd5b505160ff16600a0a611754610948565b906119a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b5051611a8d565b60045460055460065460075460085485565b60006118a561188e60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d602081101561188357600080fd5b505160ff1690611a4b565b600a0a6104b761189c6116aa565b600454906119a7565b60065490915081101561095e575060065490565b60006104d1620186a06104b76004600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192457600080fd5b505afa158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b5051906119a7565b60008061196e60105443611a4b90919063ffffffff16565b600554600f54919250611985916104b790846119a7565b9150600f5482111561199757600f5491505b5090565b60105481565b600f5481565b6000826119b657506000611a03565b828202828482816119c357fe5b0414611a005760405162461bcd60e51b81526004018080602001828103825260218152602001806122556021913960400191505060405180910390fd5b90505b92915050565b6000611a0083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f8b565b6000611a0083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612044565b611a9561221c565b60008211611ad45760405162461bcd60e51b815260040180806020018281038252602681526020018061222f6026913960400191505060405180910390fd5b82611aee5750604080516020810190915260008152611a03565b71ffffffffffffffffffffffffffffffffffff8311611b9557600082607085901b81611b1657fe5b0490506001600160e01b03811115611b75576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611a03565b6000611bb1846e0100000000000000000000000000008561209e565b90506001600160e01b03811115611b75576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b611c32610955611956565b600f5543601055565b6000611a0364174876e8006104b76109818561097c6117f6565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310611cda5780518252601f199092019160209182019101611cbb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d3c576040519150601f19603f3d011682016040523d82523d6000602084013e611d41565b606091505b5091509150818015611d6f575080511580611d6f5750808060200190516020811015611d6c57600080fd5b50515b611dc0576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600082820183811015611a00576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000611e8561188e60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b600654909150811015611e9b575060065461095e565b6006541561095e57600060065590565b600c54600d54600091611ebe9190611dc8565b600a5490915015801590611ed25750804310155b15611f885760045460095460ff1615611f0c57600a54600454611ef491611dc8565b6004819055600b5411611f07576000600a555b611f2e565b600a54600454611f1b91611a4b565b6004819055600b5410611f2e576000600a555b43600d55600454600a546009546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9181900360800190a1505b50565b600081836120175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fdc578181015183820152602001611fc4565b50505050905090810190601f1680156120095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161202357fe5b04905083858161202f57fe5b0681850201851461203c57fe5b949350505050565b600081848411156120965760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fdc578181015183820152602001611fc4565b505050900390565b60008060006120ad8686612157565b91509150600084806120bb57fe5b8688099050828111156120cf576001820391505b9182900391816120ed578483816120e257fe5b04935050505061110f565b848210612141576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b61214c838387612184565b979650505050505050565b600080806000198486099050838502925082810391508281101561217c576001820391505b509250929050565b6000818103821680838161219457fe5b0492508085816121a057fe5b0494508081600003816121af57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f757273a164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80638dbdbe6d116100e3578063d50256251161008c578063e392a26211610066578063e392a26214610456578063f5c2ab5b1461045e578063fc7b9c181461046657610198565b8063d502562514610413578063d7ccfb0b14610446578063e0176de81461044e57610198565b8063bf7e214f116100bd578063bf7e214f1461039b578063cd1234b3146103bf578063cea55f571461040b57610198565b80638dbdbe6d1461030857806395a2251f1461033a578063a50603b21461036057610198565b8063451ee4a1116101455780637927ebf81161011f5780637927ebf8146102bd5780637a9e5e4b146102da5780637cbe044c1461030057610198565b8063451ee4a11461025a578063507930ec1461028f578063759076e5146102b557610198565b80631a3d0068116101765780631a3d0068146101f95780631e321a0f1461022c5780632bab6bde1461025257610198565b806301b88ee81461019d5780630a748489146101d5578063158ef93e146101dd575b600080fd5b6101c3600480360360208110156101b357600080fd5b50356001600160a01b031661046e565b60408051918252519081900360200190f35b6101c36104c7565b6101e56104d6565b604080519115158252519081900360200190f35b61022a6004803603608081101561020f57600080fd5b508035151590602081013590604081013590606001356104df565b005b61022a6004803603604081101561024257600080fd5b5060ff81351690602001356106ba565b6101c3610898565b61026261089e565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101c3600480360360208110156102a557600080fd5b50356001600160a01b03166108b6565b6101c3610948565b6101c3600480360360208110156102d357600080fd5b5035610961565b61022a600480360360208110156102f057600080fd5b50356001600160a01b031661098f565b6101c3610add565b6101c36004803603606081101561031e57600080fd5b50803590602081013590604001356001600160a01b0316610ae3565b6101c36004803603602081101561035057600080fd5b50356001600160a01b0316611116565b61022a600480360360c081101561037657600080fd5b5080359060208101359060408101359060608101359060808101359060a00135611443565b6103a3611674565b604080516001600160a01b039092168252519081900360200190f35b6103e5600480360360208110156103d557600080fd5b50356001600160a01b0316611683565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101c36116aa565b61041b6117e4565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6101c36117f6565b6101c36118b9565b6101c3611956565b6101c361199b565b6101c36119a1565b60008061047a836108b6565b6001600160a01b0384166000908152600e602052604090205490915061271082106104a7578092506104c0565b6104bd6127106104b783856119a7565b90611a09565b92505b5050919050565b60006104d16117f6565b905090565b60115460ff1681565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d602081101561055757600080fd5b50516000906001600160a01b031633146106045760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b50509250505060405180910390fd5b5060045461061b906103e8906104b790601e6119a7565b83111561066f576040805162461bcd60e51b815260206004820152601360248201527f496e6372656d656e7420746f6f206c6172676500000000000000000000000000604482015290519081900360640190fd5b6040805160a08101825294151580865260208601859052908501839052606085018290524360809095018590526009805460ff19169091179055600a92909255600b55600c55600d55565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b50516000906001600160a01b031633146107a55760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b5060008260028111156107b457fe5b1415610805576127108110156107fb5760405162461bcd60e51b81526004018080602001828103825260248152602001806122996024913960400191505060405180910390fd5b6005819055610894565b600182600281111561081357fe5b141561087a576103e8811115610870576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6007819055610894565b600282600281111561088857fe5b14156108945760088190555b5050565b60035481565b600954600a54600b54600c54600d5460ff9094169385565b60006108c06121f4565b506001600160a01b0382166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909190610916904390611a4b565b6020830151909150801561093b57610934816104b7846127106119a7565b9350610940565b600093505b505050919050565b60006104d1610955611956565b600f5490611a4b565b90565b60008061098664174876e8006104b76109818661097c6117f6565b611a8d565b611c0f565b9150505b919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d6020811015610a0757600080fd5b50516000906001600160a01b03163314610a7a5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b50600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60025481565b60006001600160a01b038216610b40576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b610b48611c27565b600854600f541115610ba1576040805162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015290519081900360640190fd5b6000610bab6104c7565b905080841015610bec5760405162461bcd60e51b81526004018080602001828103825260238152602001806122766023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1b317e57f0000000000000000000000000000000000000000000000000000000000000000886040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b505190506000610cbc82611c3b565b905060647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d6020811015610d4357600080fd5b505160ff16600a0a81610d5257fe5b04811015610da7576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015290519081900360640190fd5b610daf6118b9565b811115610e03576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015290519081900360640190fd5b610e386001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308a611c55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b505060408051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018a90526044820184905291517f000000000000000000000000000000000000000000000000000000000000000090921691630efe6a8b9160648082019260009290919082900301818387803b158015610f9557600080fd5b505af1158015610fa9573d6000803e3d6000fd5b5050600f54610fbb9250905083611dc8565b600f55604080516080810182526001600160a01b0387166000908152600e60205291909120548190610fed9084611dc8565b815260055460208201524360408201526060016110086104c7565b90526001600160a01b0386166000908152600e6020908152604091829020835181559083015160018201559082015160028201556060909101516003909101556005547fb7ce5a2d90f1705ca02547b0eb827724683e0df3b809477ae4326d0eefed0bc0908890839061107c904390611dc8565b60408051938452602084019290925282820152519081900360600190a17f2cb17bd1fd2a1fecfefae2de1e6a59194abaa62179652924ccdca01617f0bf166110c2611e22565b6110ca6116aa565b6040805192835260208301919091528051918290030190a16002546110ef9088611dc8565b6002556003546110ff9082611dc8565b60035561110a611eab565b925050505b9392505050565b60006111206121f4565b506001600160a01b0382166000908152600e6020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015290611173846108b6565b905061271081106112a2576001600160a01b0384166000818152600e602090815260408083208381556001810184905560028101849055600301839055855181519485529184019190915282810191909152517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b19181900360600190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8584600001516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050506040513d602081101561129557600080fd5b50509051915061098a9050565b81516000906112b990612710906104b790856119a7565b905060405180608001604052806112dd838660000151611a4b90919063ffffffff16565b81526020016113076112fc866040015143611a4b90919063ffffffff16565b602087015190611a4b565b8152436020808301919091526060808701516040938401526001600160a01b0389166000818152600e845284902085518082558685015160018301558686015160028301559583015160039091015583519081529182018590528183019390935290517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b505050506040513d602081101561143657600080fd5b5090935061098a92505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561149157600080fd5b505afa1580156114a5573d6000803e3d6000fd5b505050506040513d60208110156114bb57600080fd5b50516000906001600160a01b0316331461152e5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f55780601f106105ca576101008083540402835291602001916105f5565b5060115460ff1615611587576040805162461bcd60e51b815260206004820152600b60248201527f696e697469616c697a6564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6127108510156115c85760405162461bcd60e51b81526004018080602001828103825260248152602001806122996024913960400191505060405180910390fd5b6103e883111561161f576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b6011805460ff191660011790556040805160a0810182528781526020810187905290810185905260608101849052608001829052600495909555600593909355600691909155600755600855600f5543601055565b6001546001600160a01b031681565b600e6020526000908152604090208054600182015460028301546003909301549192909184565b60006104d1670de0b6b3a76400006104b761098161175a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561171a57600080fd5b505afa15801561172e573d6000803e3d6000fd5b505050506040513d602081101561174457600080fd5b505160ff16600a0a611754610948565b906119a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b5051611a8d565b60045460055460065460075460085485565b60006118a561188e60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d602081101561188357600080fd5b505160ff1690611a4b565b600a0a6104b761189c6116aa565b600454906119a7565b60065490915081101561095e575060065490565b60006104d1620186a06104b76004600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192457600080fd5b505afa158015611938573d6000803e3d6000fd5b505050506040513d602081101561194e57600080fd5b5051906119a7565b60008061196e60105443611a4b90919063ffffffff16565b600554600f54919250611985916104b790846119a7565b9150600f5482111561199757600f5491505b5090565b60105481565b600f5481565b6000826119b657506000611a03565b828202828482816119c357fe5b0414611a005760405162461bcd60e51b81526004018080602001828103825260218152602001806122556021913960400191505060405180910390fd5b90505b92915050565b6000611a0083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f8b565b6000611a0083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612044565b611a9561221c565b60008211611ad45760405162461bcd60e51b815260040180806020018281038252602681526020018061222f6026913960400191505060405180910390fd5b82611aee5750604080516020810190915260008152611a03565b71ffffffffffffffffffffffffffffffffffff8311611b9557600082607085901b81611b1657fe5b0490506001600160e01b03811115611b75576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611a03565b6000611bb1846e0100000000000000000000000000008561209e565b90506001600160e01b03811115611b75576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b611c32610955611956565b600f5543601055565b6000611a0364174876e8006104b76109818561097c6117f6565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310611cda5780518252601f199092019160209182019101611cbb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d3c576040519150601f19603f3d011682016040523d82523d6000602084013e611d41565b606091505b5091509150818015611d6f575080511580611d6f5750808060200190516020811015611d6c57600080fd5b50515b611dc0576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600082820183811015611a00576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000611e8561188e60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b600654909150811015611e9b575060065461095e565b6006541561095e57600060065590565b600c54600d54600091611ebe9190611dc8565b600a5490915015801590611ed25750804310155b15611f885760045460095460ff1615611f0c57600a54600454611ef491611dc8565b6004819055600b5411611f07576000600a555b611f2e565b600a54600454611f1b91611a4b565b6004819055600b5410611f2e576000600a555b43600d55600454600a546009546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9181900360800190a1505b50565b600081836120175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fdc578181015183820152602001611fc4565b50505050905090810190601f1680156120095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161202357fe5b04905083858161202f57fe5b0681850201851461203c57fe5b949350505050565b600081848411156120965760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fdc578181015183820152602001611fc4565b505050900390565b60008060006120ad8686612157565b91509150600084806120bb57fe5b8688099050828111156120cf576001820391505b9182900391816120ed578483816120e257fe5b04935050505061110f565b848210612141576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b61214c838387612184565b979650505050505050565b600080806000198486099050838502925082810391508281101561217c576001820391505b509250929050565b6000818103821680838161219457fe5b0492508085816121a057fe5b0494508081600003816121af57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f757273a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice()": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt()": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay()": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio()": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_controlVariable": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint"
        }
      },
      "maxPayout()": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "redeem(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "params": {
          "_addition": "bool",
          "_buffer": "uint",
          "_increment": "uint",
          "_target": "uint"
        }
      },
      "setBondTerms(uint8,uint256)": {
        "params": {
          "_input": "uint",
          "_parameter": "PARAMETER"
        }
      },
      "trueBondPrice()": {
        "returns": {
          "price_": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice()": {
        "notice": "calculate current bond premium"
      },
      "currentDebt()": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay()": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio()": {
        "notice": "calculate current ratio of debt to payout token supplyprotocols using Olympus Pro should be careful when quickly adding large %s to total supply"
      },
      "deposit(uint256,uint256,address)": {
        "notice": "deposit bond"
      },
      "initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "initializes bond parameters"
      },
      "maxPayout()": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256)": {
        "notice": "calculate user's interest due for new bond"
      },
      "pendingPayoutFor(address)": {
        "notice": "calculate amount of payout token available for claim by depositor"
      },
      "percentVestedFor(address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address)": {
        "notice": "redeem bond for user"
      },
      "setAdjustment(bool,uint256,uint256,uint256)": {
        "notice": "set control variable adjustment"
      },
      "setBondTerms(uint8,uint256)": {
        "notice": "set parameters for new bonds"
      },
      "trueBondPrice()": {
        "notice": "calculate true bond price a user pays"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17165,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 17167,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)11604"
      },
      {
        "astId": 9389,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "totalPrincipalBonded",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9391,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "totalPayoutGiven",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9393,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "terms",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Terms)9416_storage"
      },
      {
        "astId": 9395,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "adjustment",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Adjust)9436_storage"
      },
      {
        "astId": 9399,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "bondInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Bond)9425_storage)"
      },
      {
        "astId": 9401,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "totalDebt",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 9403,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "lastDecay",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 9405,
        "contract": "contracts/custom/CustomBond.sol:CustomBond",
        "label": "initialized",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOlympusAuthority)11604": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Bond)9425_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CustomBond.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)9425_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjust)9436_storage": {
        "encoding": "inplace",
        "label": "struct CustomBond.Adjust",
        "members": [
          {
            "astId": 9427,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9429,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9431,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9433,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "buffer",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9435,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "lastBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Bond)9425_storage": {
        "encoding": "inplace",
        "label": "struct CustomBond.Bond",
        "members": [
          {
            "astId": 9418,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9420,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "vesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9422,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "lastBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9424,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "truePricePaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Terms)9416_storage": {
        "encoding": "inplace",
        "label": "struct CustomBond.Terms",
        "members": [
          {
            "astId": 9407,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9409,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9411,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9413,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9415,
            "contract": "contracts/custom/CustomBond.sol:CustomBond",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}